// source: message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Msg.ChatType', null, global);
goog.exportSymbol('proto.Msg.Content', null, global);
goog.exportSymbol('proto.Msg.Msg', null, global);
goog.exportSymbol('proto.Msg.Msg.PayloadCase', null, global);
goog.exportSymbol('proto.Msg.MsgType', null, global);
goog.exportSymbol('proto.Msg.ReceiveInfo', null, global);
goog.exportSymbol('proto.Msg.SendInfo', null, global);
goog.exportSymbol('proto.Msg.UserInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Msg.Msg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Msg.Msg.oneofGroups_);
};
goog.inherits(proto.Msg.Msg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Msg.Msg.displayName = 'proto.Msg.Msg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Msg.Content = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Msg.Content, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Msg.Content.displayName = 'proto.Msg.Content';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Msg.UserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Msg.UserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Msg.UserInfo.displayName = 'proto.Msg.UserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Msg.SendInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Msg.SendInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Msg.SendInfo.displayName = 'proto.Msg.SendInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Msg.ReceiveInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Msg.ReceiveInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Msg.ReceiveInfo.displayName = 'proto.Msg.ReceiveInfo';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Msg.Msg.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.Msg.Msg.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  TOKEN: 3,
  HEART_CHECK: 4,
  CONTENT: 5
};

/**
 * @return {proto.Msg.Msg.PayloadCase}
 */
proto.Msg.Msg.prototype.getPayloadCase = function() {
  return /** @type {proto.Msg.Msg.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.Msg.Msg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Msg.Msg.prototype.toObject = function(opt_includeInstance) {
  return proto.Msg.Msg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Msg.Msg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Msg.Msg.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    msgType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    token: jspb.Message.getFieldWithDefault(msg, 3, ""),
    heartCheck: jspb.Message.getFieldWithDefault(msg, 4, ""),
    content: (f = msg.getContent()) && proto.Msg.Content.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Msg.Msg}
 */
proto.Msg.Msg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Msg.Msg;
  return proto.Msg.Msg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Msg.Msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Msg.Msg}
 */
proto.Msg.Msg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {!proto.Msg.MsgType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeartCheck(value);
      break;
    case 5:
      var value = new proto.Msg.Content;
      reader.readMessage(value,proto.Msg.Content.deserializeBinaryFromReader);
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Msg.Msg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Msg.Msg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Msg.Msg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Msg.Msg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMsgType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContent();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Msg.Content.serializeBinaryToWriter
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.Msg.Msg.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Msg.Msg} returns this
 */
proto.Msg.Msg.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MsgType msg_type = 2;
 * @return {!proto.Msg.MsgType}
 */
proto.Msg.Msg.prototype.getMsgType = function() {
  return /** @type {!proto.Msg.MsgType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Msg.MsgType} value
 * @return {!proto.Msg.Msg} returns this
 */
proto.Msg.Msg.prototype.setMsgType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string token = 3;
 * @return {string}
 */
proto.Msg.Msg.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Msg.Msg} returns this
 */
proto.Msg.Msg.prototype.setToken = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.Msg.Msg.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Msg.Msg} returns this
 */
proto.Msg.Msg.prototype.clearToken = function() {
  return jspb.Message.setOneofField(this, 3, proto.Msg.Msg.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.Msg.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string heart_check = 4;
 * @return {string}
 */
proto.Msg.Msg.prototype.getHeartCheck = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Msg.Msg} returns this
 */
proto.Msg.Msg.prototype.setHeartCheck = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.Msg.Msg.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Msg.Msg} returns this
 */
proto.Msg.Msg.prototype.clearHeartCheck = function() {
  return jspb.Message.setOneofField(this, 4, proto.Msg.Msg.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.Msg.prototype.hasHeartCheck = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Content content = 5;
 * @return {?proto.Msg.Content}
 */
proto.Msg.Msg.prototype.getContent = function() {
  return /** @type{?proto.Msg.Content} */ (
    jspb.Message.getWrapperField(this, proto.Msg.Content, 5));
};


/**
 * @param {?proto.Msg.Content|undefined} value
 * @return {!proto.Msg.Msg} returns this
*/
proto.Msg.Msg.prototype.setContent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.Msg.Msg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Msg.Msg} returns this
 */
proto.Msg.Msg.prototype.clearContent = function() {
  return this.setContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.Msg.prototype.hasContent = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Msg.Content.prototype.toObject = function(opt_includeInstance) {
  return proto.Msg.Content.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Msg.Content} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Msg.Content.toObject = function(includeInstance, msg) {
  var f, obj = {
    sendInfo: (f = msg.getSendInfo()) && proto.Msg.SendInfo.toObject(includeInstance, f),
    receiveInfo: (f = msg.getReceiveInfo()) && proto.Msg.ReceiveInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Msg.Content}
 */
proto.Msg.Content.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Msg.Content;
  return proto.Msg.Content.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Msg.Content} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Msg.Content}
 */
proto.Msg.Content.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Msg.SendInfo;
      reader.readMessage(value,proto.Msg.SendInfo.deserializeBinaryFromReader);
      msg.setSendInfo(value);
      break;
    case 2:
      var value = new proto.Msg.ReceiveInfo;
      reader.readMessage(value,proto.Msg.ReceiveInfo.deserializeBinaryFromReader);
      msg.setReceiveInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Msg.Content.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Msg.Content.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Msg.Content} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Msg.Content.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Msg.SendInfo.serializeBinaryToWriter
    );
  }
  f = message.getReceiveInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Msg.ReceiveInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional SendInfo send_info = 1;
 * @return {?proto.Msg.SendInfo}
 */
proto.Msg.Content.prototype.getSendInfo = function() {
  return /** @type{?proto.Msg.SendInfo} */ (
    jspb.Message.getWrapperField(this, proto.Msg.SendInfo, 1));
};


/**
 * @param {?proto.Msg.SendInfo|undefined} value
 * @return {!proto.Msg.Content} returns this
*/
proto.Msg.Content.prototype.setSendInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Msg.Content} returns this
 */
proto.Msg.Content.prototype.clearSendInfo = function() {
  return this.setSendInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.Content.prototype.hasSendInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ReceiveInfo receive_info = 2;
 * @return {?proto.Msg.ReceiveInfo}
 */
proto.Msg.Content.prototype.getReceiveInfo = function() {
  return /** @type{?proto.Msg.ReceiveInfo} */ (
    jspb.Message.getWrapperField(this, proto.Msg.ReceiveInfo, 2));
};


/**
 * @param {?proto.Msg.ReceiveInfo|undefined} value
 * @return {!proto.Msg.Content} returns this
*/
proto.Msg.Content.prototype.setReceiveInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Msg.Content} returns this
 */
proto.Msg.Content.prototype.clearReceiveInfo = function() {
  return this.setReceiveInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.Content.prototype.hasReceiveInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Msg.UserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Msg.UserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Msg.UserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Msg.UserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    avatar: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Msg.UserInfo}
 */
proto.Msg.UserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Msg.UserInfo;
  return proto.Msg.UserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Msg.UserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Msg.UserInfo}
 */
proto.Msg.UserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Msg.UserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Msg.UserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Msg.UserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Msg.UserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAvatar();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.Msg.UserInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Msg.UserInfo} returns this
 */
proto.Msg.UserInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string avatar = 2;
 * @return {string}
 */
proto.Msg.UserInfo.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Msg.UserInfo} returns this
 */
proto.Msg.UserInfo.prototype.setAvatar = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.Msg.UserInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Msg.UserInfo} returns this
 */
proto.Msg.UserInfo.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Msg.SendInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Msg.SendInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Msg.SendInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Msg.SendInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sendUserInfo: (f = msg.getSendUserInfo()) && proto.Msg.UserInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Msg.SendInfo}
 */
proto.Msg.SendInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Msg.SendInfo;
  return proto.Msg.SendInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Msg.SendInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Msg.SendInfo}
 */
proto.Msg.SendInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Msg.UserInfo;
      reader.readMessage(value,proto.Msg.UserInfo.deserializeBinaryFromReader);
      msg.setSendUserInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Msg.SendInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Msg.SendInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Msg.SendInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Msg.SendInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendUserInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Msg.UserInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserInfo send_user_info = 1;
 * @return {?proto.Msg.UserInfo}
 */
proto.Msg.SendInfo.prototype.getSendUserInfo = function() {
  return /** @type{?proto.Msg.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.Msg.UserInfo, 1));
};


/**
 * @param {?proto.Msg.UserInfo|undefined} value
 * @return {!proto.Msg.SendInfo} returns this
*/
proto.Msg.SendInfo.prototype.setSendUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Msg.SendInfo} returns this
 */
proto.Msg.SendInfo.prototype.clearSendUserInfo = function() {
  return this.setSendUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.SendInfo.prototype.hasSendUserInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Msg.ReceiveInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Msg.ReceiveInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Msg.ReceiveInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Msg.ReceiveInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiveUserInfo: (f = msg.getReceiveUserInfo()) && proto.Msg.UserInfo.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    content: jspb.Message.getFieldWithDefault(msg, 3, ""),
    cid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mine: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    fromId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Msg.ReceiveInfo}
 */
proto.Msg.ReceiveInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Msg.ReceiveInfo;
  return proto.Msg.ReceiveInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Msg.ReceiveInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Msg.ReceiveInfo}
 */
proto.Msg.ReceiveInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Msg.UserInfo;
      reader.readMessage(value,proto.Msg.UserInfo.deserializeBinaryFromReader);
      msg.setReceiveUserInfo(value);
      break;
    case 2:
      var value = /** @type {!proto.Msg.ChatType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCid(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMine(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFromId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Msg.ReceiveInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Msg.ReceiveInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Msg.ReceiveInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Msg.ReceiveInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiveUserInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Msg.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMine();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getFromId();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional UserInfo receive_user_info = 1;
 * @return {?proto.Msg.UserInfo}
 */
proto.Msg.ReceiveInfo.prototype.getReceiveUserInfo = function() {
  return /** @type{?proto.Msg.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.Msg.UserInfo, 1));
};


/**
 * @param {?proto.Msg.UserInfo|undefined} value
 * @return {!proto.Msg.ReceiveInfo} returns this
*/
proto.Msg.ReceiveInfo.prototype.setReceiveUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Msg.ReceiveInfo} returns this
 */
proto.Msg.ReceiveInfo.prototype.clearReceiveUserInfo = function() {
  return this.setReceiveUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.ReceiveInfo.prototype.hasReceiveUserInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChatType type = 2;
 * @return {!proto.Msg.ChatType}
 */
proto.Msg.ReceiveInfo.prototype.getType = function() {
  return /** @type {!proto.Msg.ChatType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Msg.ChatType} value
 * @return {!proto.Msg.ReceiveInfo} returns this
 */
proto.Msg.ReceiveInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.Msg.ReceiveInfo.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Msg.ReceiveInfo} returns this
 */
proto.Msg.ReceiveInfo.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 cid = 4;
 * @return {number}
 */
proto.Msg.ReceiveInfo.prototype.getCid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Msg.ReceiveInfo} returns this
 */
proto.Msg.ReceiveInfo.prototype.setCid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool mine = 5;
 * @return {boolean}
 */
proto.Msg.ReceiveInfo.prototype.getMine = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Msg.ReceiveInfo} returns this
 */
proto.Msg.ReceiveInfo.prototype.setMine = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint32 from_id = 6;
 * @return {number}
 */
proto.Msg.ReceiveInfo.prototype.getFromId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Msg.ReceiveInfo} returns this
 */
proto.Msg.ReceiveInfo.prototype.setFromId = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 timestamp = 7;
 * @return {number}
 */
proto.Msg.ReceiveInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Msg.ReceiveInfo} returns this
 */
proto.Msg.ReceiveInfo.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.Msg.MsgType = {
  PING: 0,
  AUTH: 1,
  TEXT: 2
};

/**
 * @enum {number}
 */
proto.Msg.ChatType = {
  FRIEND: 0,
  GROUP: 1,
  SYSTEM: 2
};

goog.object.extend(exports, proto.Msg);
